name: Django CI

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        id: cache-venv  # name for referring later
        with:
          path: ./.venv/  # what we cache: the virtualenv
          # The cache key depends on requirements.txt
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Set up databases
        run: |
          PGPASSWORD="postgres" createuser -U postgres -d yellowbrick --superuser -h localhost
          PGPASSWORD="postgres" createdb -U postgres -O yellowbrick yellowbrick -h localhost
      # Build a virtualenv, but only if it doesn't already exist
      - run: python -m venv ./.venv && . ./.venv/bin/activate &&
          pip install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'
        # Run tests
        # Note that you have to activate the virtualenv in every step
        # because GitHub actions doesn't preserve the environment
      - name: Activate virtualenv
        run: . ./.venv/bin/activate
      - name: Run Tests
        run: |
          python manage.py test